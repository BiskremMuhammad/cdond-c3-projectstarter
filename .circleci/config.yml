version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-front-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Audit
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1
      - run:
          name: Save backend URL to kvdb
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --region us-east-1 \
              --output text)

            curl https://kvdb.io/QrvxEfhwKYLKMPsdQGdCij/BACKEND_URL  -d "http://${BACKEND_IP}:3030"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-front-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1
      - run:
          name: Test fetching instance ip
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --region us-east-1 \
              --output text
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --region us-east-1 \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Check if inventory file is saved
          command: |
            cd .circleci/ansible
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  

  configure-infrastructure:
    docker:
      - image: python:3.8.2-alpine
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f1:35:5b:78:9d:45:a5:e8:69:49:8d:cb:7c:57:b2:c5"
      - run:
          name: Install dependencies
          command: |
              apk add --update tar gzip
              which python3
              python3 -m pip -V
              python3 -m pip install --upgrade pip
              python3 -m pip install --user ansible
              pip3 install awscli
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run: 
          name: make sure inventory file attached to workspace
          command:  |
            cd .circleci/ansible
            cat inventory.txt
            ls ~/
            echo $PATH
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            python --version
            ansible-playbook --version
            export ANSIBLE_HOST_KEY_CHECKING=False
            export RECORD_HOST_KEYS=True
            export ANSIBLE_PYTHON_INTERPRETER=/usr/bin/python3
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment  

  run-migrations:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |  
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/QrvxEfhwKYLKMPsdQGdCij/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment         

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install python
          command: yum install -y python3
      - run:
          name: Install ansible
          command: |
            yum install -y epel-release
            yum install -y ansible
      - run:
          name: Install Node
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Install tar and gzip
          command: yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --region us-east-1 \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive --region us-east-1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment       
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install Node
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Install tar and gzip
          command: yum -y install tar gzip
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment     

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-frontend, build-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]